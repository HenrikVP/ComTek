@page "/weather"
@using Components.Model
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (WeatherForecast forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                    <td><button class="btn btn-primary" @onclick="()=>Delete(forecast)">Del</button></td>
                </tr>
            }
            <tr>
                <td><input type="date" @bind="newForecast.Date"/></td>
                <td><input type="number" @bind = "newForecast.TemperatureC"/></td>
                <td></td>
                <td><input type="text" placeholder="Summary" @bind = "newForecast.Summary"/></td>
                <td><button class="btn btn-primary" @onclick="Insert">New</button></td>
            </tr>
        </tbody>
    </table>
}

@code {
    // We create a list where we store our data for the website
    private List<WeatherForecast>? forecasts;
    private WeatherForecast newForecast = new() { Date = DateOnly.FromDateTime(DateTime.Now)};

    private void Insert()
    {
        Sql.CreateWeatherForecast(newForecast);
        forecasts = Task.Run(async () => await Sql.GetWeatherForecastsAsync<WeatherForecast>("SELECT * FROM WeatherForecast")).Result;
        newForecast = new();
    }

    private void Delete(WeatherForecast wf)
    {
        Sql.DeleteWeatherForecast(wf);
        forecasts = Task.Run(async () => await Sql.GetWeatherForecastsAsync<WeatherForecast>("SELECT * FROM WeatherForecast")).Result;
    }

    // When page loads it starts the asynchronous OnInitializedAsync method,
    // where we call our asynchronous method GetWeatherForecastsAsync that returns
    // the data from our database.
    protected override async Task OnInitializedAsync()
    {
        forecasts = await Sql.GetWeatherForecastsAsync<WeatherForecast>("SELECT * FROM WeatherForecast");
    }
}
